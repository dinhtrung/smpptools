/*
 * smpptools API
 *
 * smpptools API documentation
 *
 * API version: 0.0.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// SmscSession struct for SmscSession
type SmscSession struct {
	// unique session ID
	Id string `json:"id"`
	// remote TCP address
	RemoteAddr *string `json:"remoteAddr,omitempty"`
	// local TCP address
	LocalAddr *string `json:"localAddr,omitempty"`
	// the local time this session is created
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Account *SmscAccount `json:"account,omitempty"`
}

// NewSmscSession instantiates a new SmscSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmscSession(id string) *SmscSession {
	this := SmscSession{}
	this.Id = id
	return &this
}

// NewSmscSessionWithDefaults instantiates a new SmscSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmscSessionWithDefaults() *SmscSession {
	this := SmscSession{}
	return &this
}

// GetId returns the Id field value
func (o *SmscSession) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SmscSession) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SmscSession) SetId(v string) {
	o.Id = v
}

// GetRemoteAddr returns the RemoteAddr field value if set, zero value otherwise.
func (o *SmscSession) GetRemoteAddr() string {
	if o == nil || o.RemoteAddr == nil {
		var ret string
		return ret
	}
	return *o.RemoteAddr
}

// GetRemoteAddrOk returns a tuple with the RemoteAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmscSession) GetRemoteAddrOk() (*string, bool) {
	if o == nil || o.RemoteAddr == nil {
		return nil, false
	}
	return o.RemoteAddr, true
}

// HasRemoteAddr returns a boolean if a field has been set.
func (o *SmscSession) HasRemoteAddr() bool {
	if o != nil && o.RemoteAddr != nil {
		return true
	}

	return false
}

// SetRemoteAddr gets a reference to the given string and assigns it to the RemoteAddr field.
func (o *SmscSession) SetRemoteAddr(v string) {
	o.RemoteAddr = &v
}

// GetLocalAddr returns the LocalAddr field value if set, zero value otherwise.
func (o *SmscSession) GetLocalAddr() string {
	if o == nil || o.LocalAddr == nil {
		var ret string
		return ret
	}
	return *o.LocalAddr
}

// GetLocalAddrOk returns a tuple with the LocalAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmscSession) GetLocalAddrOk() (*string, bool) {
	if o == nil || o.LocalAddr == nil {
		return nil, false
	}
	return o.LocalAddr, true
}

// HasLocalAddr returns a boolean if a field has been set.
func (o *SmscSession) HasLocalAddr() bool {
	if o != nil && o.LocalAddr != nil {
		return true
	}

	return false
}

// SetLocalAddr gets a reference to the given string and assigns it to the LocalAddr field.
func (o *SmscSession) SetLocalAddr(v string) {
	o.LocalAddr = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SmscSession) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmscSession) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SmscSession) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SmscSession) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *SmscSession) GetAccount() SmscAccount {
	if o == nil || o.Account == nil {
		var ret SmscAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmscSession) GetAccountOk() (*SmscAccount, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *SmscSession) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given SmscAccount and assigns it to the Account field.
func (o *SmscSession) SetAccount(v SmscAccount) {
	o.Account = &v
}

func (o SmscSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.RemoteAddr != nil {
		toSerialize["remoteAddr"] = o.RemoteAddr
	}
	if o.LocalAddr != nil {
		toSerialize["localAddr"] = o.LocalAddr
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	return json.Marshal(toSerialize)
}

type NullableSmscSession struct {
	value *SmscSession
	isSet bool
}

func (v NullableSmscSession) Get() *SmscSession {
	return v.value
}

func (v *NullableSmscSession) Set(val *SmscSession) {
	v.value = val
	v.isSet = true
}

func (v NullableSmscSession) IsSet() bool {
	return v.isSet
}

func (v *NullableSmscSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmscSession(val *SmscSession) *NullableSmscSession {
	return &NullableSmscSession{value: val, isSet: true}
}

func (v NullableSmscSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmscSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



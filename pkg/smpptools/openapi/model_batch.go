/*
 * smpptools API
 *
 * smpptools API documentation
 *
 * API version: 0.0.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Batch model used for stress testing
type Batch struct {
	SmsPattern *BaseSm `json:"smsPattern,omitempty"`
	SmsData *IsdnList `json:"smsData,omitempty"`
	Throuput *ThroughputSeries `json:"throuput,omitempty"`
}

// NewBatch instantiates a new Batch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatch() *Batch {
	this := Batch{}
	return &this
}

// NewBatchWithDefaults instantiates a new Batch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchWithDefaults() *Batch {
	this := Batch{}
	return &this
}

// GetSmsPattern returns the SmsPattern field value if set, zero value otherwise.
func (o *Batch) GetSmsPattern() BaseSm {
	if o == nil || o.SmsPattern == nil {
		var ret BaseSm
		return ret
	}
	return *o.SmsPattern
}

// GetSmsPatternOk returns a tuple with the SmsPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetSmsPatternOk() (*BaseSm, bool) {
	if o == nil || o.SmsPattern == nil {
		return nil, false
	}
	return o.SmsPattern, true
}

// HasSmsPattern returns a boolean if a field has been set.
func (o *Batch) HasSmsPattern() bool {
	if o != nil && o.SmsPattern != nil {
		return true
	}

	return false
}

// SetSmsPattern gets a reference to the given BaseSm and assigns it to the SmsPattern field.
func (o *Batch) SetSmsPattern(v BaseSm) {
	o.SmsPattern = &v
}

// GetSmsData returns the SmsData field value if set, zero value otherwise.
func (o *Batch) GetSmsData() IsdnList {
	if o == nil || o.SmsData == nil {
		var ret IsdnList
		return ret
	}
	return *o.SmsData
}

// GetSmsDataOk returns a tuple with the SmsData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetSmsDataOk() (*IsdnList, bool) {
	if o == nil || o.SmsData == nil {
		return nil, false
	}
	return o.SmsData, true
}

// HasSmsData returns a boolean if a field has been set.
func (o *Batch) HasSmsData() bool {
	if o != nil && o.SmsData != nil {
		return true
	}

	return false
}

// SetSmsData gets a reference to the given IsdnList and assigns it to the SmsData field.
func (o *Batch) SetSmsData(v IsdnList) {
	o.SmsData = &v
}

// GetThrouput returns the Throuput field value if set, zero value otherwise.
func (o *Batch) GetThrouput() ThroughputSeries {
	if o == nil || o.Throuput == nil {
		var ret ThroughputSeries
		return ret
	}
	return *o.Throuput
}

// GetThrouputOk returns a tuple with the Throuput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetThrouputOk() (*ThroughputSeries, bool) {
	if o == nil || o.Throuput == nil {
		return nil, false
	}
	return o.Throuput, true
}

// HasThrouput returns a boolean if a field has been set.
func (o *Batch) HasThrouput() bool {
	if o != nil && o.Throuput != nil {
		return true
	}

	return false
}

// SetThrouput gets a reference to the given ThroughputSeries and assigns it to the Throuput field.
func (o *Batch) SetThrouput(v ThroughputSeries) {
	o.Throuput = &v
}

func (o Batch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SmsPattern != nil {
		toSerialize["smsPattern"] = o.SmsPattern
	}
	if o.SmsData != nil {
		toSerialize["smsData"] = o.SmsData
	}
	if o.Throuput != nil {
		toSerialize["throuput"] = o.Throuput
	}
	return json.Marshal(toSerialize)
}

type NullableBatch struct {
	value *Batch
	isSet bool
}

func (v NullableBatch) Get() *Batch {
	return v.value
}

func (v *NullableBatch) Set(val *Batch) {
	v.value = val
	v.isSet = true
}

func (v NullableBatch) IsSet() bool {
	return v.isSet
}

func (v *NullableBatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatch(val *Batch) *NullableBatch {
	return &NullableBatch{value: val, isSet: true}
}

func (v NullableBatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
 * smpptools API
 *
 * smpptools API documentation
 *
 * API version: 0.0.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SmppTlv struct for SmppTlv
type SmppTlv struct {
	// Tag ID
	Tag *int `json:"tag,omitempty"`
	// hex bytes of the value
	Value *string `json:"value,omitempty"`
}

// NewSmppTlv instantiates a new SmppTlv object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmppTlv() *SmppTlv {
	this := SmppTlv{}
	return &this
}

// NewSmppTlvWithDefaults instantiates a new SmppTlv object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmppTlvWithDefaults() *SmppTlv {
	this := SmppTlv{}
	return &this
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *SmppTlv) GetTag() int {
	if o == nil || o.Tag == nil {
		var ret int
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmppTlv) GetTagOk() (*int, bool) {
	if o == nil || o.Tag == nil {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *SmppTlv) HasTag() bool {
	if o != nil && o.Tag != nil {
		return true
	}

	return false
}

// SetTag gets a reference to the given int and assigns it to the Tag field.
func (o *SmppTlv) SetTag(v int) {
	o.Tag = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SmppTlv) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmppTlv) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SmppTlv) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SmppTlv) SetValue(v string) {
	o.Value = &v
}

func (o SmppTlv) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableSmppTlv struct {
	value *SmppTlv
	isSet bool
}

func (v NullableSmppTlv) Get() *SmppTlv {
	return v.value
}

func (v *NullableSmppTlv) Set(val *SmppTlv) {
	v.value = val
	v.isSet = true
}

func (v NullableSmppTlv) IsSet() bool {
	return v.isSet
}

func (v *NullableSmppTlv) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmppTlv(val *SmppTlv) *NullableSmppTlv {
	return &NullableSmppTlv{value: val, isSet: true}
}

func (v NullableSmppTlv) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmppTlv) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



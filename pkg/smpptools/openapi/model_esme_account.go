/*
 * smpptools API
 *
 * smpptools API documentation
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EsmeAccount ESME hold information on how to establish a SMPP Session towards SMSC
type EsmeAccount struct {
	// Bind Address Numbering Plan Indication
	AddressNPI *int32 `json:"addressNPI,omitempty"`
	// Bind Address Range
	AddressRange *string `json:"addressRange,omitempty"`
	// Bind Address Type of Number
	AddressTON *int32 `json:"addressTON,omitempty"`
	// Bind Type, transmitter, receiver or transceiver
	BindType *string `json:"bindType,omitempty"`
	// Connection timeout in milliseconds
	ConnectionTimeout *int32 `json:"connectionTimeout,omitempty"`
	// short description text
	Description *string `json:"description,omitempty"`
	// Error Code return to SMSC for Mobile Originated SMS
	DlrErrorCode *int32 `json:"dlrErrorCode,omitempty"`
	// Error Ratio for Receiving Mobile Orignated SMS
	DlrErrorRate *int32 `json:"dlrErrorRate,omitempty"`
	// Enquire links interval in seconds
	EnquireLinkInterval *int32 `json:"enquireLinkInterval,omitempty"`
	// remote SMSC host
	Host *string `json:"host,omitempty"`
	Id *string `json:"id,omitempty"`
	// true if this ESME should be start automatically
	IsEnable *bool `json:"isEnable,omitempty"`
	// true if this ESME should be start automatically on start up
	IsPersist *bool `json:"isPersist,omitempty"`
	// Error Code return to SMSC for Mobile Originated SMS
	MoErrorCode *int32 `json:"moErrorCode,omitempty"`
	// Error Ratio for Receiving Mobile Orignated SMS
	MoErrorRate *int32 `json:"moErrorRate,omitempty"`
	// Sending out speeds in TPS
	MtThroughtput *int32 `json:"mtThroughtput,omitempty"`
	// name of this ESME account
	Name string `json:"name"`
	// number of active binds on start up
	NumBinds *int32 `json:"numBinds,omitempty"`
	// Password for login
	Password *string `json:"password,omitempty"`
	// remote SMSC port
	Port *int32 `json:"port,omitempty"`
	// Delay in seconds before retry reconnect
	ReconnectDelay *int32 `json:"reconnectDelay,omitempty"`
	// SystemID used to connect to remote SMSC
	SystemID *string `json:"systemID,omitempty"`
	// Number of packets send out per one go
	WindowSize *int32 `json:"windowSize,omitempty"`
}

// NewEsmeAccount instantiates a new EsmeAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEsmeAccount(name string) *EsmeAccount {
	this := EsmeAccount{}
	this.Name = name
	return &this
}

// NewEsmeAccountWithDefaults instantiates a new EsmeAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEsmeAccountWithDefaults() *EsmeAccount {
	this := EsmeAccount{}
	return &this
}

// GetAddressNPI returns the AddressNPI field value if set, zero value otherwise.
func (o *EsmeAccount) GetAddressNPI() int32 {
	if o == nil || o.AddressNPI == nil {
		var ret int32
		return ret
	}
	return *o.AddressNPI
}

// GetAddressNPIOk returns a tuple with the AddressNPI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetAddressNPIOk() (*int32, bool) {
	if o == nil || o.AddressNPI == nil {
		return nil, false
	}
	return o.AddressNPI, true
}

// HasAddressNPI returns a boolean if a field has been set.
func (o *EsmeAccount) HasAddressNPI() bool {
	if o != nil && o.AddressNPI != nil {
		return true
	}

	return false
}

// SetAddressNPI gets a reference to the given int32 and assigns it to the AddressNPI field.
func (o *EsmeAccount) SetAddressNPI(v int32) {
	o.AddressNPI = &v
}

// GetAddressRange returns the AddressRange field value if set, zero value otherwise.
func (o *EsmeAccount) GetAddressRange() string {
	if o == nil || o.AddressRange == nil {
		var ret string
		return ret
	}
	return *o.AddressRange
}

// GetAddressRangeOk returns a tuple with the AddressRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetAddressRangeOk() (*string, bool) {
	if o == nil || o.AddressRange == nil {
		return nil, false
	}
	return o.AddressRange, true
}

// HasAddressRange returns a boolean if a field has been set.
func (o *EsmeAccount) HasAddressRange() bool {
	if o != nil && o.AddressRange != nil {
		return true
	}

	return false
}

// SetAddressRange gets a reference to the given string and assigns it to the AddressRange field.
func (o *EsmeAccount) SetAddressRange(v string) {
	o.AddressRange = &v
}

// GetAddressTON returns the AddressTON field value if set, zero value otherwise.
func (o *EsmeAccount) GetAddressTON() int32 {
	if o == nil || o.AddressTON == nil {
		var ret int32
		return ret
	}
	return *o.AddressTON
}

// GetAddressTONOk returns a tuple with the AddressTON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetAddressTONOk() (*int32, bool) {
	if o == nil || o.AddressTON == nil {
		return nil, false
	}
	return o.AddressTON, true
}

// HasAddressTON returns a boolean if a field has been set.
func (o *EsmeAccount) HasAddressTON() bool {
	if o != nil && o.AddressTON != nil {
		return true
	}

	return false
}

// SetAddressTON gets a reference to the given int32 and assigns it to the AddressTON field.
func (o *EsmeAccount) SetAddressTON(v int32) {
	o.AddressTON = &v
}

// GetBindType returns the BindType field value if set, zero value otherwise.
func (o *EsmeAccount) GetBindType() string {
	if o == nil || o.BindType == nil {
		var ret string
		return ret
	}
	return *o.BindType
}

// GetBindTypeOk returns a tuple with the BindType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetBindTypeOk() (*string, bool) {
	if o == nil || o.BindType == nil {
		return nil, false
	}
	return o.BindType, true
}

// HasBindType returns a boolean if a field has been set.
func (o *EsmeAccount) HasBindType() bool {
	if o != nil && o.BindType != nil {
		return true
	}

	return false
}

// SetBindType gets a reference to the given string and assigns it to the BindType field.
func (o *EsmeAccount) SetBindType(v string) {
	o.BindType = &v
}

// GetConnectionTimeout returns the ConnectionTimeout field value if set, zero value otherwise.
func (o *EsmeAccount) GetConnectionTimeout() int32 {
	if o == nil || o.ConnectionTimeout == nil {
		var ret int32
		return ret
	}
	return *o.ConnectionTimeout
}

// GetConnectionTimeoutOk returns a tuple with the ConnectionTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetConnectionTimeoutOk() (*int32, bool) {
	if o == nil || o.ConnectionTimeout == nil {
		return nil, false
	}
	return o.ConnectionTimeout, true
}

// HasConnectionTimeout returns a boolean if a field has been set.
func (o *EsmeAccount) HasConnectionTimeout() bool {
	if o != nil && o.ConnectionTimeout != nil {
		return true
	}

	return false
}

// SetConnectionTimeout gets a reference to the given int32 and assigns it to the ConnectionTimeout field.
func (o *EsmeAccount) SetConnectionTimeout(v int32) {
	o.ConnectionTimeout = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EsmeAccount) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EsmeAccount) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EsmeAccount) SetDescription(v string) {
	o.Description = &v
}

// GetDlrErrorCode returns the DlrErrorCode field value if set, zero value otherwise.
func (o *EsmeAccount) GetDlrErrorCode() int32 {
	if o == nil || o.DlrErrorCode == nil {
		var ret int32
		return ret
	}
	return *o.DlrErrorCode
}

// GetDlrErrorCodeOk returns a tuple with the DlrErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetDlrErrorCodeOk() (*int32, bool) {
	if o == nil || o.DlrErrorCode == nil {
		return nil, false
	}
	return o.DlrErrorCode, true
}

// HasDlrErrorCode returns a boolean if a field has been set.
func (o *EsmeAccount) HasDlrErrorCode() bool {
	if o != nil && o.DlrErrorCode != nil {
		return true
	}

	return false
}

// SetDlrErrorCode gets a reference to the given int32 and assigns it to the DlrErrorCode field.
func (o *EsmeAccount) SetDlrErrorCode(v int32) {
	o.DlrErrorCode = &v
}

// GetDlrErrorRate returns the DlrErrorRate field value if set, zero value otherwise.
func (o *EsmeAccount) GetDlrErrorRate() int32 {
	if o == nil || o.DlrErrorRate == nil {
		var ret int32
		return ret
	}
	return *o.DlrErrorRate
}

// GetDlrErrorRateOk returns a tuple with the DlrErrorRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetDlrErrorRateOk() (*int32, bool) {
	if o == nil || o.DlrErrorRate == nil {
		return nil, false
	}
	return o.DlrErrorRate, true
}

// HasDlrErrorRate returns a boolean if a field has been set.
func (o *EsmeAccount) HasDlrErrorRate() bool {
	if o != nil && o.DlrErrorRate != nil {
		return true
	}

	return false
}

// SetDlrErrorRate gets a reference to the given int32 and assigns it to the DlrErrorRate field.
func (o *EsmeAccount) SetDlrErrorRate(v int32) {
	o.DlrErrorRate = &v
}

// GetEnquireLinkInterval returns the EnquireLinkInterval field value if set, zero value otherwise.
func (o *EsmeAccount) GetEnquireLinkInterval() int32 {
	if o == nil || o.EnquireLinkInterval == nil {
		var ret int32
		return ret
	}
	return *o.EnquireLinkInterval
}

// GetEnquireLinkIntervalOk returns a tuple with the EnquireLinkInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetEnquireLinkIntervalOk() (*int32, bool) {
	if o == nil || o.EnquireLinkInterval == nil {
		return nil, false
	}
	return o.EnquireLinkInterval, true
}

// HasEnquireLinkInterval returns a boolean if a field has been set.
func (o *EsmeAccount) HasEnquireLinkInterval() bool {
	if o != nil && o.EnquireLinkInterval != nil {
		return true
	}

	return false
}

// SetEnquireLinkInterval gets a reference to the given int32 and assigns it to the EnquireLinkInterval field.
func (o *EsmeAccount) SetEnquireLinkInterval(v int32) {
	o.EnquireLinkInterval = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *EsmeAccount) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *EsmeAccount) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *EsmeAccount) SetHost(v string) {
	o.Host = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EsmeAccount) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EsmeAccount) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EsmeAccount) SetId(v string) {
	o.Id = &v
}

// GetIsEnable returns the IsEnable field value if set, zero value otherwise.
func (o *EsmeAccount) GetIsEnable() bool {
	if o == nil || o.IsEnable == nil {
		var ret bool
		return ret
	}
	return *o.IsEnable
}

// GetIsEnableOk returns a tuple with the IsEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetIsEnableOk() (*bool, bool) {
	if o == nil || o.IsEnable == nil {
		return nil, false
	}
	return o.IsEnable, true
}

// HasIsEnable returns a boolean if a field has been set.
func (o *EsmeAccount) HasIsEnable() bool {
	if o != nil && o.IsEnable != nil {
		return true
	}

	return false
}

// SetIsEnable gets a reference to the given bool and assigns it to the IsEnable field.
func (o *EsmeAccount) SetIsEnable(v bool) {
	o.IsEnable = &v
}

// GetIsPersist returns the IsPersist field value if set, zero value otherwise.
func (o *EsmeAccount) GetIsPersist() bool {
	if o == nil || o.IsPersist == nil {
		var ret bool
		return ret
	}
	return *o.IsPersist
}

// GetIsPersistOk returns a tuple with the IsPersist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetIsPersistOk() (*bool, bool) {
	if o == nil || o.IsPersist == nil {
		return nil, false
	}
	return o.IsPersist, true
}

// HasIsPersist returns a boolean if a field has been set.
func (o *EsmeAccount) HasIsPersist() bool {
	if o != nil && o.IsPersist != nil {
		return true
	}

	return false
}

// SetIsPersist gets a reference to the given bool and assigns it to the IsPersist field.
func (o *EsmeAccount) SetIsPersist(v bool) {
	o.IsPersist = &v
}

// GetMoErrorCode returns the MoErrorCode field value if set, zero value otherwise.
func (o *EsmeAccount) GetMoErrorCode() int32 {
	if o == nil || o.MoErrorCode == nil {
		var ret int32
		return ret
	}
	return *o.MoErrorCode
}

// GetMoErrorCodeOk returns a tuple with the MoErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetMoErrorCodeOk() (*int32, bool) {
	if o == nil || o.MoErrorCode == nil {
		return nil, false
	}
	return o.MoErrorCode, true
}

// HasMoErrorCode returns a boolean if a field has been set.
func (o *EsmeAccount) HasMoErrorCode() bool {
	if o != nil && o.MoErrorCode != nil {
		return true
	}

	return false
}

// SetMoErrorCode gets a reference to the given int32 and assigns it to the MoErrorCode field.
func (o *EsmeAccount) SetMoErrorCode(v int32) {
	o.MoErrorCode = &v
}

// GetMoErrorRate returns the MoErrorRate field value if set, zero value otherwise.
func (o *EsmeAccount) GetMoErrorRate() int32 {
	if o == nil || o.MoErrorRate == nil {
		var ret int32
		return ret
	}
	return *o.MoErrorRate
}

// GetMoErrorRateOk returns a tuple with the MoErrorRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetMoErrorRateOk() (*int32, bool) {
	if o == nil || o.MoErrorRate == nil {
		return nil, false
	}
	return o.MoErrorRate, true
}

// HasMoErrorRate returns a boolean if a field has been set.
func (o *EsmeAccount) HasMoErrorRate() bool {
	if o != nil && o.MoErrorRate != nil {
		return true
	}

	return false
}

// SetMoErrorRate gets a reference to the given int32 and assigns it to the MoErrorRate field.
func (o *EsmeAccount) SetMoErrorRate(v int32) {
	o.MoErrorRate = &v
}

// GetMtThroughtput returns the MtThroughtput field value if set, zero value otherwise.
func (o *EsmeAccount) GetMtThroughtput() int32 {
	if o == nil || o.MtThroughtput == nil {
		var ret int32
		return ret
	}
	return *o.MtThroughtput
}

// GetMtThroughtputOk returns a tuple with the MtThroughtput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetMtThroughtputOk() (*int32, bool) {
	if o == nil || o.MtThroughtput == nil {
		return nil, false
	}
	return o.MtThroughtput, true
}

// HasMtThroughtput returns a boolean if a field has been set.
func (o *EsmeAccount) HasMtThroughtput() bool {
	if o != nil && o.MtThroughtput != nil {
		return true
	}

	return false
}

// SetMtThroughtput gets a reference to the given int32 and assigns it to the MtThroughtput field.
func (o *EsmeAccount) SetMtThroughtput(v int32) {
	o.MtThroughtput = &v
}

// GetName returns the Name field value
func (o *EsmeAccount) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EsmeAccount) SetName(v string) {
	o.Name = v
}

// GetNumBinds returns the NumBinds field value if set, zero value otherwise.
func (o *EsmeAccount) GetNumBinds() int32 {
	if o == nil || o.NumBinds == nil {
		var ret int32
		return ret
	}
	return *o.NumBinds
}

// GetNumBindsOk returns a tuple with the NumBinds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetNumBindsOk() (*int32, bool) {
	if o == nil || o.NumBinds == nil {
		return nil, false
	}
	return o.NumBinds, true
}

// HasNumBinds returns a boolean if a field has been set.
func (o *EsmeAccount) HasNumBinds() bool {
	if o != nil && o.NumBinds != nil {
		return true
	}

	return false
}

// SetNumBinds gets a reference to the given int32 and assigns it to the NumBinds field.
func (o *EsmeAccount) SetNumBinds(v int32) {
	o.NumBinds = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *EsmeAccount) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *EsmeAccount) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *EsmeAccount) SetPassword(v string) {
	o.Password = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *EsmeAccount) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *EsmeAccount) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *EsmeAccount) SetPort(v int32) {
	o.Port = &v
}

// GetReconnectDelay returns the ReconnectDelay field value if set, zero value otherwise.
func (o *EsmeAccount) GetReconnectDelay() int32 {
	if o == nil || o.ReconnectDelay == nil {
		var ret int32
		return ret
	}
	return *o.ReconnectDelay
}

// GetReconnectDelayOk returns a tuple with the ReconnectDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetReconnectDelayOk() (*int32, bool) {
	if o == nil || o.ReconnectDelay == nil {
		return nil, false
	}
	return o.ReconnectDelay, true
}

// HasReconnectDelay returns a boolean if a field has been set.
func (o *EsmeAccount) HasReconnectDelay() bool {
	if o != nil && o.ReconnectDelay != nil {
		return true
	}

	return false
}

// SetReconnectDelay gets a reference to the given int32 and assigns it to the ReconnectDelay field.
func (o *EsmeAccount) SetReconnectDelay(v int32) {
	o.ReconnectDelay = &v
}

// GetSystemID returns the SystemID field value if set, zero value otherwise.
func (o *EsmeAccount) GetSystemID() string {
	if o == nil || o.SystemID == nil {
		var ret string
		return ret
	}
	return *o.SystemID
}

// GetSystemIDOk returns a tuple with the SystemID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetSystemIDOk() (*string, bool) {
	if o == nil || o.SystemID == nil {
		return nil, false
	}
	return o.SystemID, true
}

// HasSystemID returns a boolean if a field has been set.
func (o *EsmeAccount) HasSystemID() bool {
	if o != nil && o.SystemID != nil {
		return true
	}

	return false
}

// SetSystemID gets a reference to the given string and assigns it to the SystemID field.
func (o *EsmeAccount) SetSystemID(v string) {
	o.SystemID = &v
}

// GetWindowSize returns the WindowSize field value if set, zero value otherwise.
func (o *EsmeAccount) GetWindowSize() int32 {
	if o == nil || o.WindowSize == nil {
		var ret int32
		return ret
	}
	return *o.WindowSize
}

// GetWindowSizeOk returns a tuple with the WindowSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsmeAccount) GetWindowSizeOk() (*int32, bool) {
	if o == nil || o.WindowSize == nil {
		return nil, false
	}
	return o.WindowSize, true
}

// HasWindowSize returns a boolean if a field has been set.
func (o *EsmeAccount) HasWindowSize() bool {
	if o != nil && o.WindowSize != nil {
		return true
	}

	return false
}

// SetWindowSize gets a reference to the given int32 and assigns it to the WindowSize field.
func (o *EsmeAccount) SetWindowSize(v int32) {
	o.WindowSize = &v
}

func (o EsmeAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AddressNPI != nil {
		toSerialize["addressNPI"] = o.AddressNPI
	}
	if o.AddressRange != nil {
		toSerialize["addressRange"] = o.AddressRange
	}
	if o.AddressTON != nil {
		toSerialize["addressTON"] = o.AddressTON
	}
	if o.BindType != nil {
		toSerialize["bindType"] = o.BindType
	}
	if o.ConnectionTimeout != nil {
		toSerialize["connectionTimeout"] = o.ConnectionTimeout
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DlrErrorCode != nil {
		toSerialize["dlrErrorCode"] = o.DlrErrorCode
	}
	if o.DlrErrorRate != nil {
		toSerialize["dlrErrorRate"] = o.DlrErrorRate
	}
	if o.EnquireLinkInterval != nil {
		toSerialize["enquireLinkInterval"] = o.EnquireLinkInterval
	}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsEnable != nil {
		toSerialize["isEnable"] = o.IsEnable
	}
	if o.IsPersist != nil {
		toSerialize["isPersist"] = o.IsPersist
	}
	if o.MoErrorCode != nil {
		toSerialize["moErrorCode"] = o.MoErrorCode
	}
	if o.MoErrorRate != nil {
		toSerialize["moErrorRate"] = o.MoErrorRate
	}
	if o.MtThroughtput != nil {
		toSerialize["mtThroughtput"] = o.MtThroughtput
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.NumBinds != nil {
		toSerialize["numBinds"] = o.NumBinds
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.ReconnectDelay != nil {
		toSerialize["reconnectDelay"] = o.ReconnectDelay
	}
	if o.SystemID != nil {
		toSerialize["systemID"] = o.SystemID
	}
	if o.WindowSize != nil {
		toSerialize["windowSize"] = o.WindowSize
	}
	return json.Marshal(toSerialize)
}

type NullableEsmeAccount struct {
	value *EsmeAccount
	isSet bool
}

func (v NullableEsmeAccount) Get() *EsmeAccount {
	return v.value
}

func (v *NullableEsmeAccount) Set(val *EsmeAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableEsmeAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableEsmeAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEsmeAccount(val *EsmeAccount) *NullableEsmeAccount {
	return &NullableEsmeAccount{value: val, isSet: true}
}

func (v NullableEsmeAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEsmeAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
 * smpptools API
 *
 * smpptools API documentation
 *
 * API version: 0.0.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// EsmeAccountResourceApiService EsmeAccountResourceApi service
type EsmeAccountResourceApiService service

type ApiApiEsmeAccountsIdBatchDeleteRequest struct {
	ctx _context.Context
	ApiService *EsmeAccountResourceApiService
	id string
}


func (r ApiApiEsmeAccountsIdBatchDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ApiEsmeAccountsIdBatchDeleteExecute(r)
}

/*
 * ApiEsmeAccountsIdBatchDelete Stop all batch current running in selected SMSC sessions
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id ID of selected session
 * @return ApiApiEsmeAccountsIdBatchDeleteRequest
 */
func (a *EsmeAccountResourceApiService) ApiEsmeAccountsIdBatchDelete(ctx _context.Context, id string) ApiApiEsmeAccountsIdBatchDeleteRequest {
	return ApiApiEsmeAccountsIdBatchDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *EsmeAccountResourceApiService) ApiEsmeAccountsIdBatchDeleteExecute(r ApiApiEsmeAccountsIdBatchDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeAccountResourceApiService.ApiEsmeAccountsIdBatchDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-accounts/{id}/batch"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateEsmeAccountUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *EsmeAccountResourceApiService
	esmeAccount *EsmeAccount
}

func (r ApiCreateEsmeAccountUsingPOSTRequest) EsmeAccount(esmeAccount EsmeAccount) ApiCreateEsmeAccountUsingPOSTRequest {
	r.esmeAccount = &esmeAccount
	return r
}

func (r ApiCreateEsmeAccountUsingPOSTRequest) Execute() (EsmeAccount, *_nethttp.Response, error) {
	return r.ApiService.CreateEsmeAccountUsingPOSTExecute(r)
}

/*
 * CreateEsmeAccountUsingPOST createEsmeAccount
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCreateEsmeAccountUsingPOSTRequest
 */
func (a *EsmeAccountResourceApiService) CreateEsmeAccountUsingPOST(ctx _context.Context) ApiCreateEsmeAccountUsingPOSTRequest {
	return ApiCreateEsmeAccountUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return EsmeAccount
 */
func (a *EsmeAccountResourceApiService) CreateEsmeAccountUsingPOSTExecute(r ApiCreateEsmeAccountUsingPOSTRequest) (EsmeAccount, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EsmeAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeAccountResourceApiService.CreateEsmeAccountUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esmeAccount
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteEsmeAccountUsingDELETERequest struct {
	ctx _context.Context
	ApiService *EsmeAccountResourceApiService
	accountID string
}


func (r ApiDeleteEsmeAccountUsingDELETERequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteEsmeAccountUsingDELETEExecute(r)
}

/*
 * DeleteEsmeAccountUsingDELETE deleteEsmeAccount
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountID id
 * @return ApiDeleteEsmeAccountUsingDELETERequest
 */
func (a *EsmeAccountResourceApiService) DeleteEsmeAccountUsingDELETE(ctx _context.Context, accountID string) ApiDeleteEsmeAccountUsingDELETERequest {
	return ApiDeleteEsmeAccountUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
	}
}

/*
 * Execute executes the request
 */
func (a *EsmeAccountResourceApiService) DeleteEsmeAccountUsingDELETEExecute(r ApiDeleteEsmeAccountUsingDELETERequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeAccountResourceApiService.DeleteEsmeAccountUsingDELETE")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-accounts/{accountID}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", _neturl.PathEscape(parameterToString(r.accountID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllEsmeAccountsUsingGETRequest struct {
	ctx _context.Context
	ApiService *EsmeAccountResourceApiService
}


func (r ApiGetAllEsmeAccountsUsingGETRequest) Execute() ([]EsmeAccount, *_nethttp.Response, error) {
	return r.ApiService.GetAllEsmeAccountsUsingGETExecute(r)
}

/*
 * GetAllEsmeAccountsUsingGET getAllEsmeAccounts
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetAllEsmeAccountsUsingGETRequest
 */
func (a *EsmeAccountResourceApiService) GetAllEsmeAccountsUsingGET(ctx _context.Context) ApiGetAllEsmeAccountsUsingGETRequest {
	return ApiGetAllEsmeAccountsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []EsmeAccount
 */
func (a *EsmeAccountResourceApiService) GetAllEsmeAccountsUsingGETExecute(r ApiGetAllEsmeAccountsUsingGETRequest) ([]EsmeAccount, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []EsmeAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeAccountResourceApiService.GetAllEsmeAccountsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/x-ndjson"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAllEsmeSessionsByAccountUsingGETRequest struct {
	ctx _context.Context
	ApiService *EsmeAccountResourceApiService
	accountID string
}


func (r ApiGetAllEsmeSessionsByAccountUsingGETRequest) Execute() (EsmeSession, *_nethttp.Response, error) {
	return r.ApiService.GetAllEsmeSessionsByAccountUsingGETExecute(r)
}

/*
 * GetAllEsmeSessionsByAccountUsingGET Retrieve all active session for current account
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountID ID of selected session
 * @return ApiGetAllEsmeSessionsByAccountUsingGETRequest
 */
func (a *EsmeAccountResourceApiService) GetAllEsmeSessionsByAccountUsingGET(ctx _context.Context, accountID string) ApiGetAllEsmeSessionsByAccountUsingGETRequest {
	return ApiGetAllEsmeSessionsByAccountUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
	}
}

/*
 * Execute executes the request
 * @return EsmeSession
 */
func (a *EsmeAccountResourceApiService) GetAllEsmeSessionsByAccountUsingGETExecute(r ApiGetAllEsmeSessionsByAccountUsingGETRequest) (EsmeSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EsmeSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeAccountResourceApiService.GetAllEsmeSessionsByAccountUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-accounts/{accountID}/sessions"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", _neturl.PathEscape(parameterToString(r.accountID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEsmeAccountUsingGETRequest struct {
	ctx _context.Context
	ApiService *EsmeAccountResourceApiService
	accountID string
}


func (r ApiGetEsmeAccountUsingGETRequest) Execute() (EsmeAccount, *_nethttp.Response, error) {
	return r.ApiService.GetEsmeAccountUsingGETExecute(r)
}

/*
 * GetEsmeAccountUsingGET getEsmeAccount
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountID id
 * @return ApiGetEsmeAccountUsingGETRequest
 */
func (a *EsmeAccountResourceApiService) GetEsmeAccountUsingGET(ctx _context.Context, accountID string) ApiGetEsmeAccountUsingGETRequest {
	return ApiGetEsmeAccountUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
	}
}

/*
 * Execute executes the request
 * @return EsmeAccount
 */
func (a *EsmeAccountResourceApiService) GetEsmeAccountUsingGETExecute(r ApiGetEsmeAccountUsingGETRequest) (EsmeAccount, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EsmeAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeAccountResourceApiService.GetEsmeAccountUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-accounts/{accountID}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", _neturl.PathEscape(parameterToString(r.accountID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPartialUpdateEsmeAccountUsingPATCHRequest struct {
	ctx _context.Context
	ApiService *EsmeAccountResourceApiService
	accountID string
	esmeAccount *EsmeAccount
}

func (r ApiPartialUpdateEsmeAccountUsingPATCHRequest) EsmeAccount(esmeAccount EsmeAccount) ApiPartialUpdateEsmeAccountUsingPATCHRequest {
	r.esmeAccount = &esmeAccount
	return r
}

func (r ApiPartialUpdateEsmeAccountUsingPATCHRequest) Execute() (EsmeAccount, *_nethttp.Response, error) {
	return r.ApiService.PartialUpdateEsmeAccountUsingPATCHExecute(r)
}

/*
 * PartialUpdateEsmeAccountUsingPATCH partialUpdateEsmeAccount
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountID id
 * @return ApiPartialUpdateEsmeAccountUsingPATCHRequest
 */
func (a *EsmeAccountResourceApiService) PartialUpdateEsmeAccountUsingPATCH(ctx _context.Context, accountID string) ApiPartialUpdateEsmeAccountUsingPATCHRequest {
	return ApiPartialUpdateEsmeAccountUsingPATCHRequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
	}
}

/*
 * Execute executes the request
 * @return EsmeAccount
 */
func (a *EsmeAccountResourceApiService) PartialUpdateEsmeAccountUsingPATCHExecute(r ApiPartialUpdateEsmeAccountUsingPATCHRequest) (EsmeAccount, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EsmeAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeAccountResourceApiService.PartialUpdateEsmeAccountUsingPATCH")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-accounts/{accountID}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", _neturl.PathEscape(parameterToString(r.accountID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esmeAccount
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSendMobileTerminatedSMSOnAccountUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *EsmeAccountResourceApiService
	id string
	baseSm *BaseSm
}

func (r ApiSendMobileTerminatedSMSOnAccountUsingPOSTRequest) BaseSm(baseSm BaseSm) ApiSendMobileTerminatedSMSOnAccountUsingPOSTRequest {
	r.baseSm = &baseSm
	return r
}

func (r ApiSendMobileTerminatedSMSOnAccountUsingPOSTRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SendMobileTerminatedSMSOnAccountUsingPOSTExecute(r)
}

/*
 * SendMobileTerminatedSMSOnAccountUsingPOST Send Mobile Terminated SMS on selected SMSC account during Functional Testing
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id ID of selected session
 * @return ApiSendMobileTerminatedSMSOnAccountUsingPOSTRequest
 */
func (a *EsmeAccountResourceApiService) SendMobileTerminatedSMSOnAccountUsingPOST(ctx _context.Context, id string) ApiSendMobileTerminatedSMSOnAccountUsingPOSTRequest {
	return ApiSendMobileTerminatedSMSOnAccountUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *EsmeAccountResourceApiService) SendMobileTerminatedSMSOnAccountUsingPOSTExecute(r ApiSendMobileTerminatedSMSOnAccountUsingPOSTRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeAccountResourceApiService.SendMobileTerminatedSMSOnAccountUsingPOST")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-accounts/{id}/send-mt"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.baseSm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSendSMSonSMSCsessionUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *EsmeAccountResourceApiService
	id string
	batch *Batch
}

func (r ApiSendSMSonSMSCsessionUsingPOSTRequest) Batch(batch Batch) ApiSendSMSonSMSCsessionUsingPOSTRequest {
	r.batch = &batch
	return r
}

func (r ApiSendSMSonSMSCsessionUsingPOSTRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SendSMSonSMSCsessionUsingPOSTExecute(r)
}

/*
 * SendSMSonSMSCsessionUsingPOST Send Mobile Originated SMS on selected session with given patterns and data files
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id ID of selected session
 * @return ApiSendSMSonSMSCsessionUsingPOSTRequest
 */
func (a *EsmeAccountResourceApiService) SendSMSonSMSCsessionUsingPOST(ctx _context.Context, id string) ApiSendSMSonSMSCsessionUsingPOSTRequest {
	return ApiSendSMSonSMSCsessionUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *EsmeAccountResourceApiService) SendSMSonSMSCsessionUsingPOSTExecute(r ApiSendSMSonSMSCsessionUsingPOSTRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeAccountResourceApiService.SendSMSonSMSCsessionUsingPOST")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-accounts/{id}/batch"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiStopAllEsmeSessionsForAccountUsingDELETERequest struct {
	ctx _context.Context
	ApiService *EsmeAccountResourceApiService
	accountID string
}


func (r ApiStopAllEsmeSessionsForAccountUsingDELETERequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.StopAllEsmeSessionsForAccountUsingDELETEExecute(r)
}

/*
 * StopAllEsmeSessionsForAccountUsingDELETE Stop all active SMPP sessions from this account
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountID ID of selected session
 * @return ApiStopAllEsmeSessionsForAccountUsingDELETERequest
 */
func (a *EsmeAccountResourceApiService) StopAllEsmeSessionsForAccountUsingDELETE(ctx _context.Context, accountID string) ApiStopAllEsmeSessionsForAccountUsingDELETERequest {
	return ApiStopAllEsmeSessionsForAccountUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
	}
}

/*
 * Execute executes the request
 */
func (a *EsmeAccountResourceApiService) StopAllEsmeSessionsForAccountUsingDELETEExecute(r ApiStopAllEsmeSessionsForAccountUsingDELETERequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeAccountResourceApiService.StopAllEsmeSessionsForAccountUsingDELETE")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-accounts/{accountID}/sessions"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", _neturl.PathEscape(parameterToString(r.accountID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateEsmeAccountUsingPUTRequest struct {
	ctx _context.Context
	ApiService *EsmeAccountResourceApiService
	accountID string
	esmeAccount *EsmeAccount
}

func (r ApiUpdateEsmeAccountUsingPUTRequest) EsmeAccount(esmeAccount EsmeAccount) ApiUpdateEsmeAccountUsingPUTRequest {
	r.esmeAccount = &esmeAccount
	return r
}

func (r ApiUpdateEsmeAccountUsingPUTRequest) Execute() (EsmeAccount, *_nethttp.Response, error) {
	return r.ApiService.UpdateEsmeAccountUsingPUTExecute(r)
}

/*
 * UpdateEsmeAccountUsingPUT updateEsmeAccount
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountID id
 * @return ApiUpdateEsmeAccountUsingPUTRequest
 */
func (a *EsmeAccountResourceApiService) UpdateEsmeAccountUsingPUT(ctx _context.Context, accountID string) ApiUpdateEsmeAccountUsingPUTRequest {
	return ApiUpdateEsmeAccountUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		accountID: accountID,
	}
}

/*
 * Execute executes the request
 * @return EsmeAccount
 */
func (a *EsmeAccountResourceApiService) UpdateEsmeAccountUsingPUTExecute(r ApiUpdateEsmeAccountUsingPUTRequest) (EsmeAccount, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EsmeAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeAccountResourceApiService.UpdateEsmeAccountUsingPUT")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-accounts/{accountID}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountID"+"}", _neturl.PathEscape(parameterToString(r.accountID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esmeAccount
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

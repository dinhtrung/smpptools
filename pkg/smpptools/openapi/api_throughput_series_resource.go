/*
 * smpptools API
 *
 * smpptools API documentation
 *
 * API version: 0.0.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ThroughputSeriesResourceApiService ThroughputSeriesResourceApi service
type ThroughputSeriesResourceApiService service

type ApiCreateThroughputSeriesUsingPOSTRequest struct {
	ctx              _context.Context
	ApiService       *ThroughputSeriesResourceApiService
	throughputSeries *ThroughputSeries
}

func (r ApiCreateThroughputSeriesUsingPOSTRequest) ThroughputSeries(throughputSeries ThroughputSeries) ApiCreateThroughputSeriesUsingPOSTRequest {
	r.throughputSeries = &throughputSeries
	return r
}

func (r ApiCreateThroughputSeriesUsingPOSTRequest) Execute() (ThroughputSeries, *_nethttp.Response, error) {
	return r.ApiService.CreateThroughputSeriesUsingPOSTExecute(r)
}

/*
 * CreateThroughputSeriesUsingPOST createThroughputSeries
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCreateThroughputSeriesUsingPOSTRequest
 */
func (a *ThroughputSeriesResourceApiService) CreateThroughputSeriesUsingPOST(ctx _context.Context) ApiCreateThroughputSeriesUsingPOSTRequest {
	return ApiCreateThroughputSeriesUsingPOSTRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return ThroughputSeries
 */
func (a *ThroughputSeriesResourceApiService) CreateThroughputSeriesUsingPOSTExecute(r ApiCreateThroughputSeriesUsingPOSTRequest) (ThroughputSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ThroughputSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThroughputSeriesResourceApiService.CreateThroughputSeriesUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/throughput-series"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.throughputSeries
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteThroughputSeriesUsingDELETERequest struct {
	ctx        _context.Context
	ApiService *ThroughputSeriesResourceApiService
	id         string
}

func (r ApiDeleteThroughputSeriesUsingDELETERequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteThroughputSeriesUsingDELETEExecute(r)
}

/*
 * DeleteThroughputSeriesUsingDELETE deleteThroughputSeries
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id id
 * @return ApiDeleteThroughputSeriesUsingDELETERequest
 */
func (a *ThroughputSeriesResourceApiService) DeleteThroughputSeriesUsingDELETE(ctx _context.Context, id string) ApiDeleteThroughputSeriesUsingDELETERequest {
	return ApiDeleteThroughputSeriesUsingDELETERequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *ThroughputSeriesResourceApiService) DeleteThroughputSeriesUsingDELETEExecute(r ApiDeleteThroughputSeriesUsingDELETERequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThroughputSeriesResourceApiService.DeleteThroughputSeriesUsingDELETE")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/throughput-series/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllThroughputSeriessUsingGETRequest struct {
	ctx        _context.Context
	ApiService *ThroughputSeriesResourceApiService
}

func (r ApiGetAllThroughputSeriessUsingGETRequest) Execute() ([]ThroughputSeries, *_nethttp.Response, error) {
	return r.ApiService.GetAllThroughputSeriessUsingGETExecute(r)
}

/*
 * GetAllThroughputSeriessUsingGET getAllThroughputSeriess
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetAllThroughputSeriessUsingGETRequest
 */
func (a *ThroughputSeriesResourceApiService) GetAllThroughputSeriessUsingGET(ctx _context.Context) ApiGetAllThroughputSeriessUsingGETRequest {
	return ApiGetAllThroughputSeriessUsingGETRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return []ThroughputSeries
 */
func (a *ThroughputSeriesResourceApiService) GetAllThroughputSeriessUsingGETExecute(r ApiGetAllThroughputSeriessUsingGETRequest) ([]ThroughputSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []ThroughputSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThroughputSeriesResourceApiService.GetAllThroughputSeriessUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/throughput-series"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/x-ndjson"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetThroughputSeriesUsingGETRequest struct {
	ctx        _context.Context
	ApiService *ThroughputSeriesResourceApiService
	id         string
}

func (r ApiGetThroughputSeriesUsingGETRequest) Execute() (ThroughputSeries, *_nethttp.Response, error) {
	return r.ApiService.GetThroughputSeriesUsingGETExecute(r)
}

/*
 * GetThroughputSeriesUsingGET getThroughputSeries
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id id
 * @return ApiGetThroughputSeriesUsingGETRequest
 */
func (a *ThroughputSeriesResourceApiService) GetThroughputSeriesUsingGET(ctx _context.Context, id string) ApiGetThroughputSeriesUsingGETRequest {
	return ApiGetThroughputSeriesUsingGETRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 * @return ThroughputSeries
 */
func (a *ThroughputSeriesResourceApiService) GetThroughputSeriesUsingGETExecute(r ApiGetThroughputSeriesUsingGETRequest) (ThroughputSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ThroughputSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThroughputSeriesResourceApiService.GetThroughputSeriesUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/throughput-series/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVariantThroughputSeriesUsingGETRequest struct {
	ctx        _context.Context
	ApiService *ThroughputSeriesResourceApiService
	id         string
	variantID  string
	min        *float32
	max        *float32
}

func (r ApiGetVariantThroughputSeriesUsingGETRequest) Min(min float32) ApiGetVariantThroughputSeriesUsingGETRequest {
	r.min = &min
	return r
}
func (r ApiGetVariantThroughputSeriesUsingGETRequest) Max(max float32) ApiGetVariantThroughputSeriesUsingGETRequest {
	r.max = &max
	return r
}

func (r ApiGetVariantThroughputSeriesUsingGETRequest) Execute() (ThroughputSeries, *_nethttp.Response, error) {
	return r.ApiService.GetVariantThroughputSeriesUsingGETExecute(r)
}

/*
 * GetVariantThroughputSeriesUsingGET Get a variant of selected throughput series
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id id
 * @param variantID One of available transform over throughput series values
 * @return ApiGetVariantThroughputSeriesUsingGETRequest
 */
func (a *ThroughputSeriesResourceApiService) GetVariantThroughputSeriesUsingGET(ctx _context.Context, id string, variantID string) ApiGetVariantThroughputSeriesUsingGETRequest {
	return ApiGetVariantThroughputSeriesUsingGETRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		variantID:  variantID,
	}
}

/*
 * Execute executes the request
 * @return ThroughputSeries
 */
func (a *ThroughputSeriesResourceApiService) GetVariantThroughputSeriesUsingGETExecute(r ApiGetVariantThroughputSeriesUsingGETRequest) (ThroughputSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ThroughputSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThroughputSeriesResourceApiService.GetVariantThroughputSeriesUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/throughput-series/{id}/transform/{variantID}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"variantID"+"}", _neturl.PathEscape(parameterToString(r.variantID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.min != nil {
		localVarQueryParams.Add("min", parameterToString(*r.min, ""))
	}
	if r.max != nil {
		localVarQueryParams.Add("max", parameterToString(*r.max, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPartialUpdateThroughputSeriesUsingPATCHRequest struct {
	ctx              _context.Context
	ApiService       *ThroughputSeriesResourceApiService
	id               string
	throughputSeries *ThroughputSeries
}

func (r ApiPartialUpdateThroughputSeriesUsingPATCHRequest) ThroughputSeries(throughputSeries ThroughputSeries) ApiPartialUpdateThroughputSeriesUsingPATCHRequest {
	r.throughputSeries = &throughputSeries
	return r
}

func (r ApiPartialUpdateThroughputSeriesUsingPATCHRequest) Execute() (ThroughputSeries, *_nethttp.Response, error) {
	return r.ApiService.PartialUpdateThroughputSeriesUsingPATCHExecute(r)
}

/*
 * PartialUpdateThroughputSeriesUsingPATCH partialUpdateThroughputSeries
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id id
 * @return ApiPartialUpdateThroughputSeriesUsingPATCHRequest
 */
func (a *ThroughputSeriesResourceApiService) PartialUpdateThroughputSeriesUsingPATCH(ctx _context.Context, id string) ApiPartialUpdateThroughputSeriesUsingPATCHRequest {
	return ApiPartialUpdateThroughputSeriesUsingPATCHRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 * @return ThroughputSeries
 */
func (a *ThroughputSeriesResourceApiService) PartialUpdateThroughputSeriesUsingPATCHExecute(r ApiPartialUpdateThroughputSeriesUsingPATCHRequest) (ThroughputSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ThroughputSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThroughputSeriesResourceApiService.PartialUpdateThroughputSeriesUsingPATCH")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/throughput-series/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.throughputSeries
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateThroughputSeriesUsingPUTRequest struct {
	ctx              _context.Context
	ApiService       *ThroughputSeriesResourceApiService
	id               string
	throughputSeries *ThroughputSeries
}

func (r ApiUpdateThroughputSeriesUsingPUTRequest) ThroughputSeries(throughputSeries ThroughputSeries) ApiUpdateThroughputSeriesUsingPUTRequest {
	r.throughputSeries = &throughputSeries
	return r
}

func (r ApiUpdateThroughputSeriesUsingPUTRequest) Execute() (ThroughputSeries, *_nethttp.Response, error) {
	return r.ApiService.UpdateThroughputSeriesUsingPUTExecute(r)
}

/*
 * UpdateThroughputSeriesUsingPUT updateThroughputSeries
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id id
 * @return ApiUpdateThroughputSeriesUsingPUTRequest
 */
func (a *ThroughputSeriesResourceApiService) UpdateThroughputSeriesUsingPUT(ctx _context.Context, id string) ApiUpdateThroughputSeriesUsingPUTRequest {
	return ApiUpdateThroughputSeriesUsingPUTRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 * @return ThroughputSeries
 */
func (a *ThroughputSeriesResourceApiService) UpdateThroughputSeriesUsingPUTExecute(r ApiUpdateThroughputSeriesUsingPUTRequest) (ThroughputSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ThroughputSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThroughputSeriesResourceApiService.UpdateThroughputSeriesUsingPUT")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/throughput-series/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.throughputSeries
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

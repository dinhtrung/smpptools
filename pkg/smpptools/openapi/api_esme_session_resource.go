/*
 * smpptools API
 *
 * smpptools API documentation
 *
 * API version: 0.0.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// EsmeSessionResourceApiService EsmeSessionResourceApi service
type EsmeSessionResourceApiService service

type ApiCreateEsmeSessionUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *EsmeSessionResourceApiService
	esmeAccount *EsmeAccount
}

func (r ApiCreateEsmeSessionUsingPOSTRequest) EsmeAccount(esmeAccount EsmeAccount) ApiCreateEsmeSessionUsingPOSTRequest {
	r.esmeAccount = &esmeAccount
	return r
}

func (r ApiCreateEsmeSessionUsingPOSTRequest) Execute() (EsmeSession, *_nethttp.Response, error) {
	return r.ApiService.CreateEsmeSessionUsingPOSTExecute(r)
}

/*
 * CreateEsmeSessionUsingPOST Create a new SMPP Session from ESME based on given account
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCreateEsmeSessionUsingPOSTRequest
 */
func (a *EsmeSessionResourceApiService) CreateEsmeSessionUsingPOST(ctx _context.Context) ApiCreateEsmeSessionUsingPOSTRequest {
	return ApiCreateEsmeSessionUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return EsmeSession
 */
func (a *EsmeSessionResourceApiService) CreateEsmeSessionUsingPOSTExecute(r ApiCreateEsmeSessionUsingPOSTRequest) (EsmeSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EsmeSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeSessionResourceApiService.CreateEsmeSessionUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-sessions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esmeAccount
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteEsmeSessionUsingDELETERequest struct {
	ctx _context.Context
	ApiService *EsmeSessionResourceApiService
	sessionID string
}


func (r ApiDeleteEsmeSessionUsingDELETERequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteEsmeSessionUsingDELETEExecute(r)
}

/*
 * DeleteEsmeSessionUsingDELETE deleteEsmeSession
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sessionID id
 * @return ApiDeleteEsmeSessionUsingDELETERequest
 */
func (a *EsmeSessionResourceApiService) DeleteEsmeSessionUsingDELETE(ctx _context.Context, sessionID string) ApiDeleteEsmeSessionUsingDELETERequest {
	return ApiDeleteEsmeSessionUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
		sessionID: sessionID,
	}
}

/*
 * Execute executes the request
 */
func (a *EsmeSessionResourceApiService) DeleteEsmeSessionUsingDELETEExecute(r ApiDeleteEsmeSessionUsingDELETERequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeSessionResourceApiService.DeleteEsmeSessionUsingDELETE")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-sessions/{sessionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionID"+"}", _neturl.PathEscape(parameterToString(r.sessionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllEsmeSessionsRequest struct {
	ctx _context.Context
	ApiService *EsmeSessionResourceApiService
}


func (r ApiGetAllEsmeSessionsRequest) Execute() ([]EsmeSession, *_nethttp.Response, error) {
	return r.ApiService.GetAllEsmeSessionsExecute(r)
}

/*
 * GetAllEsmeSessions getAllEsmeSessions
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetAllEsmeSessionsRequest
 */
func (a *EsmeSessionResourceApiService) GetAllEsmeSessions(ctx _context.Context) ApiGetAllEsmeSessionsRequest {
	return ApiGetAllEsmeSessionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []EsmeSession
 */
func (a *EsmeSessionResourceApiService) GetAllEsmeSessionsExecute(r ApiGetAllEsmeSessionsRequest) ([]EsmeSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []EsmeSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeSessionResourceApiService.GetAllEsmeSessions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-sessions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/x-ndjson"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEsmeSessionUsingGETRequest struct {
	ctx _context.Context
	ApiService *EsmeSessionResourceApiService
	sessionID string
}


func (r ApiGetEsmeSessionUsingGETRequest) Execute() (EsmeSession, *_nethttp.Response, error) {
	return r.ApiService.GetEsmeSessionUsingGETExecute(r)
}

/*
 * GetEsmeSessionUsingGET View ESME Session Details
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sessionID session ID
 * @return ApiGetEsmeSessionUsingGETRequest
 */
func (a *EsmeSessionResourceApiService) GetEsmeSessionUsingGET(ctx _context.Context, sessionID string) ApiGetEsmeSessionUsingGETRequest {
	return ApiGetEsmeSessionUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		sessionID: sessionID,
	}
}

/*
 * Execute executes the request
 * @return EsmeSession
 */
func (a *EsmeSessionResourceApiService) GetEsmeSessionUsingGETExecute(r ApiGetEsmeSessionUsingGETRequest) (EsmeSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EsmeSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeSessionResourceApiService.GetEsmeSessionUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-sessions/{sessionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionID"+"}", _neturl.PathEscape(parameterToString(r.sessionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPartialUpdateEsmeSessionUsingPATCHRequest struct {
	ctx _context.Context
	ApiService *EsmeSessionResourceApiService
	sessionID string
	esmeSession *EsmeSession
}

func (r ApiPartialUpdateEsmeSessionUsingPATCHRequest) EsmeSession(esmeSession EsmeSession) ApiPartialUpdateEsmeSessionUsingPATCHRequest {
	r.esmeSession = &esmeSession
	return r
}

func (r ApiPartialUpdateEsmeSessionUsingPATCHRequest) Execute() (IsdnList, *_nethttp.Response, error) {
	return r.ApiService.PartialUpdateEsmeSessionUsingPATCHExecute(r)
}

/*
 * PartialUpdateEsmeSessionUsingPATCH partialUpdateEsmeSession
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sessionID id
 * @return ApiPartialUpdateEsmeSessionUsingPATCHRequest
 */
func (a *EsmeSessionResourceApiService) PartialUpdateEsmeSessionUsingPATCH(ctx _context.Context, sessionID string) ApiPartialUpdateEsmeSessionUsingPATCHRequest {
	return ApiPartialUpdateEsmeSessionUsingPATCHRequest{
		ApiService: a,
		ctx: ctx,
		sessionID: sessionID,
	}
}

/*
 * Execute executes the request
 * @return IsdnList
 */
func (a *EsmeSessionResourceApiService) PartialUpdateEsmeSessionUsingPATCHExecute(r ApiPartialUpdateEsmeSessionUsingPATCHRequest) (IsdnList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IsdnList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeSessionResourceApiService.PartialUpdateEsmeSessionUsingPATCH")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-sessions/{sessionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionID"+"}", _neturl.PathEscape(parameterToString(r.sessionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esmeSession
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSendBatchSMSonEsmeSessionUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *EsmeSessionResourceApiService
	sessionID string
	batch *Batch
}

func (r ApiSendBatchSMSonEsmeSessionUsingPOSTRequest) Batch(batch Batch) ApiSendBatchSMSonEsmeSessionUsingPOSTRequest {
	r.batch = &batch
	return r
}

func (r ApiSendBatchSMSonEsmeSessionUsingPOSTRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SendBatchSMSonEsmeSessionUsingPOSTExecute(r)
}

/*
 * SendBatchSMSonEsmeSessionUsingPOST Send Mobile Originated SMS on selected session with given patterns and data files
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sessionID ID of selected session
 * @return ApiSendBatchSMSonEsmeSessionUsingPOSTRequest
 */
func (a *EsmeSessionResourceApiService) SendBatchSMSonEsmeSessionUsingPOST(ctx _context.Context, sessionID string) ApiSendBatchSMSonEsmeSessionUsingPOSTRequest {
	return ApiSendBatchSMSonEsmeSessionUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
		sessionID: sessionID,
	}
}

/*
 * Execute executes the request
 */
func (a *EsmeSessionResourceApiService) SendBatchSMSonEsmeSessionUsingPOSTExecute(r ApiSendBatchSMSonEsmeSessionUsingPOSTRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeSessionResourceApiService.SendBatchSMSonEsmeSessionUsingPOST")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-sessions/{sessionID}/batch"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionID"+"}", _neturl.PathEscape(parameterToString(r.sessionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSendMTonEsmeSessionUsingPostRequest struct {
	ctx _context.Context
	ApiService *EsmeSessionResourceApiService
	sessionID string
	baseSm *BaseSm
}

func (r ApiSendMTonEsmeSessionUsingPostRequest) BaseSm(baseSm BaseSm) ApiSendMTonEsmeSessionUsingPostRequest {
	r.baseSm = &baseSm
	return r
}

func (r ApiSendMTonEsmeSessionUsingPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SendMTonEsmeSessionUsingPostExecute(r)
}

/*
 * SendMTonEsmeSessionUsingPost Send Mobile Terminated SMS on selected session with given patterns and data files
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sessionID ID of selected session
 * @return ApiSendMTonEsmeSessionUsingPostRequest
 */
func (a *EsmeSessionResourceApiService) SendMTonEsmeSessionUsingPost(ctx _context.Context, sessionID string) ApiSendMTonEsmeSessionUsingPostRequest {
	return ApiSendMTonEsmeSessionUsingPostRequest{
		ApiService: a,
		ctx: ctx,
		sessionID: sessionID,
	}
}

/*
 * Execute executes the request
 */
func (a *EsmeSessionResourceApiService) SendMTonEsmeSessionUsingPostExecute(r ApiSendMTonEsmeSessionUsingPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeSessionResourceApiService.SendMTonEsmeSessionUsingPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-sessions/{sessionID}/send-mt"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionID"+"}", _neturl.PathEscape(parameterToString(r.sessionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.baseSm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiStartStressTestOnEsmeSessionUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *EsmeSessionResourceApiService
	sessionID string
	stressTestSettings *StressTestSettings
}

func (r ApiStartStressTestOnEsmeSessionUsingPOSTRequest) StressTestSettings(stressTestSettings StressTestSettings) ApiStartStressTestOnEsmeSessionUsingPOSTRequest {
	r.stressTestSettings = &stressTestSettings
	return r
}

func (r ApiStartStressTestOnEsmeSessionUsingPOSTRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.StartStressTestOnEsmeSessionUsingPOSTExecute(r)
}

/*
 * StartStressTestOnEsmeSessionUsingPOST Perform Stress Testing on selected ESME Session
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sessionID ID of selected session
 * @return ApiStartStressTestOnEsmeSessionUsingPOSTRequest
 */
func (a *EsmeSessionResourceApiService) StartStressTestOnEsmeSessionUsingPOST(ctx _context.Context, sessionID string) ApiStartStressTestOnEsmeSessionUsingPOSTRequest {
	return ApiStartStressTestOnEsmeSessionUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
		sessionID: sessionID,
	}
}

/*
 * Execute executes the request
 */
func (a *EsmeSessionResourceApiService) StartStressTestOnEsmeSessionUsingPOSTExecute(r ApiStartStressTestOnEsmeSessionUsingPOSTRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeSessionResourceApiService.StartStressTestOnEsmeSessionUsingPOST")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-sessions/{sessionID}/stress"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionID"+"}", _neturl.PathEscape(parameterToString(r.sessionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.stressTestSettings
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiStopAllBatchOnEsmeSessionUsingDELETERequest struct {
	ctx _context.Context
	ApiService *EsmeSessionResourceApiService
	sessionID string
}


func (r ApiStopAllBatchOnEsmeSessionUsingDELETERequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.StopAllBatchOnEsmeSessionUsingDELETEExecute(r)
}

/*
 * StopAllBatchOnEsmeSessionUsingDELETE Stop all batch current running in selected SMSC sessions
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sessionID ID of selected session
 * @return ApiStopAllBatchOnEsmeSessionUsingDELETERequest
 */
func (a *EsmeSessionResourceApiService) StopAllBatchOnEsmeSessionUsingDELETE(ctx _context.Context, sessionID string) ApiStopAllBatchOnEsmeSessionUsingDELETERequest {
	return ApiStopAllBatchOnEsmeSessionUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
		sessionID: sessionID,
	}
}

/*
 * Execute executes the request
 */
func (a *EsmeSessionResourceApiService) StopAllBatchOnEsmeSessionUsingDELETEExecute(r ApiStopAllBatchOnEsmeSessionUsingDELETERequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeSessionResourceApiService.StopAllBatchOnEsmeSessionUsingDELETE")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-sessions/{sessionID}/batch"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionID"+"}", _neturl.PathEscape(parameterToString(r.sessionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiStopStressTestOnEsmeSessionUsingDELETERequest struct {
	ctx _context.Context
	ApiService *EsmeSessionResourceApiService
	sessionID string
}


func (r ApiStopStressTestOnEsmeSessionUsingDELETERequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.StopStressTestOnEsmeSessionUsingDELETEExecute(r)
}

/*
 * StopStressTestOnEsmeSessionUsingDELETE Stop all stress test current running in selected SMSC sessions
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sessionID ID of selected session
 * @return ApiStopStressTestOnEsmeSessionUsingDELETERequest
 */
func (a *EsmeSessionResourceApiService) StopStressTestOnEsmeSessionUsingDELETE(ctx _context.Context, sessionID string) ApiStopStressTestOnEsmeSessionUsingDELETERequest {
	return ApiStopStressTestOnEsmeSessionUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
		sessionID: sessionID,
	}
}

/*
 * Execute executes the request
 */
func (a *EsmeSessionResourceApiService) StopStressTestOnEsmeSessionUsingDELETEExecute(r ApiStopStressTestOnEsmeSessionUsingDELETERequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeSessionResourceApiService.StopStressTestOnEsmeSessionUsingDELETE")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-sessions/{sessionID}/stress"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionID"+"}", _neturl.PathEscape(parameterToString(r.sessionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateEsmeSessionUsingPUTRequest struct {
	ctx _context.Context
	ApiService *EsmeSessionResourceApiService
	sessionID string
	esmeSession *EsmeSession
}

func (r ApiUpdateEsmeSessionUsingPUTRequest) EsmeSession(esmeSession EsmeSession) ApiUpdateEsmeSessionUsingPUTRequest {
	r.esmeSession = &esmeSession
	return r
}

func (r ApiUpdateEsmeSessionUsingPUTRequest) Execute() (EsmeSession, *_nethttp.Response, error) {
	return r.ApiService.UpdateEsmeSessionUsingPUTExecute(r)
}

/*
 * UpdateEsmeSessionUsingPUT updateEsmeSession
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sessionID id
 * @return ApiUpdateEsmeSessionUsingPUTRequest
 */
func (a *EsmeSessionResourceApiService) UpdateEsmeSessionUsingPUT(ctx _context.Context, sessionID string) ApiUpdateEsmeSessionUsingPUTRequest {
	return ApiUpdateEsmeSessionUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		sessionID: sessionID,
	}
}

/*
 * Execute executes the request
 * @return EsmeSession
 */
func (a *EsmeSessionResourceApiService) UpdateEsmeSessionUsingPUTExecute(r ApiUpdateEsmeSessionUsingPUTRequest) (EsmeSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EsmeSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EsmeSessionResourceApiService.UpdateEsmeSessionUsingPUT")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/esme-sessions/{sessionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionID"+"}", _neturl.PathEscape(parameterToString(r.sessionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.esmeSession
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
 * smpptools API
 *
 * smpptools API documentation
 *
 * API version: 0.0.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ThroughputSeries A series of traffic throughput used for re-generate traffic throughput patterns
type ThroughputSeries struct {
	// Name of this throughput series
	Name string `json:"name"`
	// A short description of this throughput
	Description *string `json:"description,omitempty"`
	// throughput per minute of current series
	Values *[]float32 `json:"values,omitempty"`
	// CDR file name this throughput series was generated from
	Datafile *string `json:"datafile,omitempty"`
	// State of this throughput series
	State *int32 `json:"state,omitempty"`
}

// NewThroughputSeries instantiates a new ThroughputSeries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThroughputSeries(name string) *ThroughputSeries {
	this := ThroughputSeries{}
	this.Name = name
	return &this
}

// NewThroughputSeriesWithDefaults instantiates a new ThroughputSeries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThroughputSeriesWithDefaults() *ThroughputSeries {
	this := ThroughputSeries{}
	return &this
}

// GetName returns the Name field value
func (o *ThroughputSeries) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ThroughputSeries) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ThroughputSeries) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ThroughputSeries) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThroughputSeries) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ThroughputSeries) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ThroughputSeries) SetDescription(v string) {
	o.Description = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ThroughputSeries) GetValues() []float32 {
	if o == nil || o.Values == nil {
		var ret []float32
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThroughputSeries) GetValuesOk() (*[]float32, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ThroughputSeries) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []float32 and assigns it to the Values field.
func (o *ThroughputSeries) SetValues(v []float32) {
	o.Values = &v
}

// GetDatafile returns the Datafile field value if set, zero value otherwise.
func (o *ThroughputSeries) GetDatafile() string {
	if o == nil || o.Datafile == nil {
		var ret string
		return ret
	}
	return *o.Datafile
}

// GetDatafileOk returns a tuple with the Datafile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThroughputSeries) GetDatafileOk() (*string, bool) {
	if o == nil || o.Datafile == nil {
		return nil, false
	}
	return o.Datafile, true
}

// HasDatafile returns a boolean if a field has been set.
func (o *ThroughputSeries) HasDatafile() bool {
	if o != nil && o.Datafile != nil {
		return true
	}

	return false
}

// SetDatafile gets a reference to the given string and assigns it to the Datafile field.
func (o *ThroughputSeries) SetDatafile(v string) {
	o.Datafile = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ThroughputSeries) GetState() int32 {
	if o == nil || o.State == nil {
		var ret int32
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThroughputSeries) GetStateOk() (*int32, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ThroughputSeries) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given int32 and assigns it to the State field.
func (o *ThroughputSeries) SetState(v int32) {
	o.State = &v
}

func (o ThroughputSeries) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	if o.Datafile != nil {
		toSerialize["datafile"] = o.Datafile
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableThroughputSeries struct {
	value *ThroughputSeries
	isSet bool
}

func (v NullableThroughputSeries) Get() *ThroughputSeries {
	return v.value
}

func (v *NullableThroughputSeries) Set(val *ThroughputSeries) {
	v.value = val
	v.isSet = true
}

func (v NullableThroughputSeries) IsSet() bool {
	return v.isSet
}

func (v *NullableThroughputSeries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThroughputSeries(val *ThroughputSeries) *NullableThroughputSeries {
	return &NullableThroughputSeries{value: val, isSet: true}
}

func (v NullableThroughputSeries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThroughputSeries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


